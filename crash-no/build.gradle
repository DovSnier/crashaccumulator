apply plugin: 'com.android.library'

def siteUrl = 'https://github.com/DovSnier/crashaccumulator.git'
def gitUrl = 'git@github.com:DovSnier/crashaccumulator.git'

android {
    compileSdkVersion rootProject.ext.compile_sdk_version
    buildToolsVersion rootProject.ext.build_tools_version

    defaultConfig {
        minSdkVersion rootProject.ext.min_sdk_version
        targetSdkVersion rootProject.ext.target_sdk_version
        versionCode rootProject.ext.version_code
        versionName rootProject.ext.version_name
        buildConfigField 'String', 'DVS_CONFIG', "\"dvs_config\""
        buildConfigField 'String', 'DVS_CONFIG_VERSION', "\"${rootProject.ext.version_name}\""

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
//        warning 'InvalidPackage'
    }

//    libraryVariants.all {
//        it.generateBuildConfig.enabled = false
//    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:support-annotations:${rootProject.ext.support_annotations_version}"
    testImplementation "junit:junit:${rootProject.ext.junit_version}"
    androidTestImplementation "com.android.support.test:runner:${rootProject.ext.runner_version}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${rootProject.ext.espresso_core_version}"
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    //noinspection GroovyAccessibility
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def user = properties.getProperty("bintray.user")
def key = properties.getProperty("bintray.apikey")
